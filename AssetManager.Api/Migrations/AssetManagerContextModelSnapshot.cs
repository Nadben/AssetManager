// <auto-generated />
using System;
using AssetManager.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AssetManager.Api.Migrations
{
    [DbContext(typeof(AssetManagerContext))]
    partial class AssetManagerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AssetManager.Domain.Entities.Area", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Areas", (string)null);
                });

            modelBuilder.Entity("AssetManager.Domain.Entities.Asset", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AreaId")
                        .HasColumnType("uuid");

                    b.Property<string>("IpId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("IpId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Password");

                    b.Property<int>("Port")
                        .HasColumnType("integer")
                        .HasColumnName("Client Port");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("UserName");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.ToTable("Assets", (string)null);
                });

            modelBuilder.Entity("AssetManager.Domain.ValueObject.Owner", b =>
                {
                    b.Property<int>("_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("_id"));

                    b.Property<Guid?>("AreaId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AssetId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.HasKey("_id");

                    b.HasIndex("AreaId");

                    b.HasIndex("AssetId");

                    b.ToTable("Owner");
                });

            modelBuilder.Entity("AssetManager.Domain.Entities.Camera", b =>
                {
                    b.HasBaseType("AssetManager.Domain.Entities.Asset");

                    b.Property<Guid?>("RecorderId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RecorderId1")
                        .HasColumnType("uuid");

                    b.HasIndex("RecorderId");

                    b.HasIndex("RecorderId1");

                    b.ToTable("Cameras", (string)null);
                });

            modelBuilder.Entity("AssetManager.Domain.Entities.Recorder", b =>
                {
                    b.HasBaseType("AssetManager.Domain.Entities.Asset");

                    b.ToTable("Recorders", (string)null);
                });

            modelBuilder.Entity("AssetManager.Domain.Entities.Asset", b =>
                {
                    b.HasOne("AssetManager.Domain.Entities.Area", null)
                        .WithMany("Assets")
                        .HasForeignKey("AreaId");
                });

            modelBuilder.Entity("AssetManager.Domain.ValueObject.Owner", b =>
                {
                    b.HasOne("AssetManager.Domain.Entities.Area", null)
                        .WithMany("Owners")
                        .HasForeignKey("AreaId");

                    b.HasOne("AssetManager.Domain.Entities.Asset", null)
                        .WithMany("Owners")
                        .HasForeignKey("AssetId");
                });

            modelBuilder.Entity("AssetManager.Domain.Entities.Camera", b =>
                {
                    b.HasOne("AssetManager.Domain.Entities.Asset", null)
                        .WithOne()
                        .HasForeignKey("AssetManager.Domain.Entities.Camera", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AssetManager.Domain.Entities.Recorder", null)
                        .WithMany("Cameras")
                        .HasForeignKey("RecorderId");

                    b.HasOne("AssetManager.Domain.Entities.Recorder", null)
                        .WithMany()
                        .HasForeignKey("RecorderId1");
                });

            modelBuilder.Entity("AssetManager.Domain.Entities.Recorder", b =>
                {
                    b.HasOne("AssetManager.Domain.Entities.Asset", null)
                        .WithOne()
                        .HasForeignKey("AssetManager.Domain.Entities.Recorder", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AssetManager.Domain.Entities.Area", b =>
                {
                    b.Navigation("Assets");

                    b.Navigation("Owners");
                });

            modelBuilder.Entity("AssetManager.Domain.Entities.Asset", b =>
                {
                    b.Navigation("Owners");
                });

            modelBuilder.Entity("AssetManager.Domain.Entities.Recorder", b =>
                {
                    b.Navigation("Cameras");
                });
#pragma warning restore 612, 618
        }
    }
}
